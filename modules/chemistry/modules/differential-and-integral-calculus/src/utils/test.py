from matplotlib import pyplot as plt
import numpy as np

# Remove warnings.
import warnings
warnings.filterwarnings(
    "ignore",
    category=RuntimeWarning,
    message="invalid value encountered in divide"
)

def f(x):
    return (2 * x**2 - x - 1) / (x - 1)


def createGraph(x, y):
    plt.figure(figsize=(7, 5))  # Width, height.
    plt.plot(x, f(x), color='green', marker='o', linewidth=1, label=r"$f(x) = \frac{2x^{2} - x - 1}{x - 1}$")
    plt.axvline(x=1, color='red', linestyle='dashed', linewidth=2, label="x = 1 (indeterminação)")
    plt.title(r"$f(x) = \frac{2x^{2} - x - 1}{x - 1}$")
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid()
    plt.legend()
    plt.savefig("../images/limit-fx-01.png")
    plt.show()


if __name__ == '__main__':

    x = np.linspace(-2, 5)  # Generate points to from -2 to 5.
    y = f(x)                # Compute the corresponding y values.

    # Print x and y values.
    for xi, yi in zip(x, y):
        print(f"x: {xi:.4f}, y: {yi:.4f}")

    createGraph(x, y)







###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################






from matplotlib import pyplot as plt

import numpy as np
import math

# Remove warnings.
import warnings
warnings.filterwarnings(
    "ignore",
    category=RuntimeWarning,
    message="invalid value encountered in divide"
)

import re

def f(expression):
    return f"{expression}"



if __name__ == '__main__':

    x = np.linspace(-2, 5)  # Generate points to from -2 to 5.
    # y = (2 * x**2 - x - 1) / (x - 1)

    y = eval(input("Enter the function: "))

    result = f(y)
    print(result)





###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################





from matplotlib import pyplot as plt

import numpy as np
import math

# Remove warnings.
import warnings
warnings.filterwarnings(
    "ignore",
    category=RuntimeWarning,
    message="invalid value encountered in divide"
)


def f(x):
    return (2 * x**2 - x - 1) / (x - 1)


def checkNanIndices(y_list):
    """
    Checks for NaN values in the list
    and returns the indices where NaN is present.
    
    Parameters:
    y_list (list): List of y values.
    
    Returns:
    list: Indices where NaN values are present.
    """
    nan_indices = []
    for i, y in enumerate(y_list):
        if math.isnan(y):
            nan_indices.append(i)  # Append the index where NaN is found
    return nan_indices


def createGraph(x, y):
    """
    Creates a graph with the given values.

    Parameters:
    x (array-like): X-axis values.
    y (array-like): Y-axis values.
    """
    plt.figure(figsize=(7, 5))  # Width, height.
    plt.plot(
        x,              # X-axis values.
        y,              # Y-axis values.
        color='green',  # Line color.
        marker='o',     # Marker type.
        linewidth=1,    # Line width.
    )
    plt.title(r"$f(x) = \frac{2x^{2} - x - 1}{x - 1}$")
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid()
    plt.savefig("../images/limit-fx-01.png")
    plt.show()


if __name__ == '__main__':

    x = np.linspace(-2, 5)  # Generate points to from -2 to 5.
    y = f(x)                # Compute the corresponding y values.

    ind = checkNanIndices(y)
    print(ind)





###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################






from matplotlib import pyplot as plt
import numpy as np


def f(x):
    return (2 * x**2 - x - 1) / (x - 1)


def check_indeterminate(x, y):
    """
    Checks if the relationship between x and y
    results in an indeterminate value (e.g., 0/0).
    
    Parameters:
    x (list): List of x values.
    y (list): List of y values.
    
    Returns:
    list: Indices where the relationship is indeterminate (0/0).
    """
    indeterminate_indices = []
    for i, (x, y) in enumerate(zip(x_list, y_list)):
        if x == 1 and y == 0:  # Example condition for indeterminate case
            indeterminate_indices.append(i)  # Add index where indeterminate occurs
    return indeterminate_indices


def createGraph(x, y):
    """
    Creates a graph with the given values.

    Parameters:
    x (array-like): X-axis values.
    y (array-like): Y-axis values.
    """
    plt.figure(figsize=(7, 5))  # Width, height.
    plt.plot(
        x,              # X-axis values.
        y,              # Y-axis values.
        color='green',  # Line color.
        marker='o',     # Marker type.
        linewidth=1,    # Line width.
    )
    plt.title(r"$f(x) = \frac{2x^{2} - x - 1}{x - 1}$")
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid()
    plt.savefig("../images/limit-fx-01.png")
    plt.show()


if __name__ == '__main__':

    x = np.linspace(-2, 5)  # Generate points to from -2 to 5.
    y = f(x)                # Compute the corresponding y values.

    # Print x and y values.
    for xi, yi in zip(x, y):
        print(f"x: {xi:.4f}, y: {yi:.4f}")

    createGraph(x, y)


###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################



from matplotlib import pyplot as plt

import numpy as np
import math

# Remove warnings.
import warnings
warnings.filterwarnings(
    "ignore",
    category=RuntimeWarning,
    message="invalid value encountered in divide"
)


def f(x):
    return (2 * x**2 - x - 1) / (x - 1)


def checkNanIndices(y_list):
    nan_indices = []
    for i, y in enumerate(y_list):
        if math.isnan(y):
            nan_indices.append(i)  # Append the index where NaN is found
    return nan_indices


def createGraph(x, y):
    """
    Creates a graph with the given values.

    Parameters:
    x (array-like): X-axis values.
    y (array-like): Y-axis values.
    """
    plt.figure(figsize=(7, 5))  # Width, height.
    plt.plot(
        x,              # X-axis values.
        y,              # Y-axis values.
        color='green',  # Line color.
        marker='o',     # Marker type.
        linewidth=1,    # Line width.
    )
    plt.title(r"$f(x) = \frac{2x^{2} - x - 1}{x - 1}$")
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid()
    plt.savefig("../images/limit-fx-01.png")
    plt.show()


if __name__ == '__main__':

    x = np.linspace(-2, 5)  # Generate points to from -2 to 5.
    y = f(x)                # Compute the corresponding y values.

    ind = checkNanIndices(y)
    print(ind)







###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################





from matplotlib import pyplot as plt
import numpy as np

def f(x):
    return (2 * x**2 - x - 1) / (x - 1)

if __name__ == '__main__':
    x = np.linspace(-2, 5, 400)  # Gera pontos no intervalo [-2,5]

    plt.figure(
    figsize=(7, 5))
    plt.plot(x, f(x), color='green', marker='o', linewidth=1, label=r"$f(x) = \frac{2x^{2} - x - 1}{x - 1}$")
    plt.axvline(x=1, color='red', linestyle='dashed', linewidth=2, label="x = 1 (indeterminação)")
    plt.title(r"$f(x) = \frac{2x^{2} - x - 1}{x - 1}$")
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid()
    plt.legend()
    plt.savefig("../images/limit-fx-01.png")
    plt.show()
